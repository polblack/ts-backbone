/**
 * @desc module
 *  module Definition for decorator and main class
 * 
 *  A module is a set of comoponents routed by a router
 *  
 *  exports  @module decorator
 *  
 *  @param include? : array of components to include in module, will be created and launched when it is necessry
 *  @param bootstrap?: array of components that will be launched on initialization
 *  @param routes?: Router generated by the function forRoot(params:type)  or 
 *                  
 * 
 */

import * as Backbone from "backbone";

export interface module_params{
    include?:any, //Array of components to include,
    bootstrap?:any, //Array of components to launch inmediately
    routes?:any, //set of routes in format 

    
}
/**
 * @description module decorator
 */
export function module(params:module_params)
{
    console.log("initializing module with params");console.log(params);
    return function(constructor:Function)
    {
        console.log("creating module of" + constructor);
        let iconstructor:any = constructor;
         
        let nconstructor = function(){
                let obj = new iconstructor();
                obj.type="module";
                ///Extend object for events
                _.extend(obj,Backbone.Events);
                ///Load included components and modules
                //@todo
                ///Load bootstrap components
                //@todo






        }
        return <any>nconstructor;
    }
} 


export abstract class Module{

    
    
    public initialize(){

    }
    public destroy(){

    }
}